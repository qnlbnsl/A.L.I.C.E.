{
  "openapi": "3.0.3",
  "info": {
    "title": "arguflow-server",
    "description": "Arguflow REST API OpenAPI Documentation",
    "license": {
      "name": ""
    },
    "version": "1.0.0"
  },
  "paths": {
    "/api/auth": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "login",
        "description": "login\n\nThis will redirect you to the OAuth provider for authentication with email/pass, SSO, Google, Github, etc.",
        "operationId": "login",
        "requestBody": {
          "description": "Query parameters for login",
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/AuthQuery"
              }
            }
          },
          "required": true
        },
        "responses": {
          "303": {
            "description": "Response that redirects to OAuth provider"
          },
          "400": {
            "description": "OAuth Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "auth"
        ],
        "summary": "logout",
        "description": "logout\n\nInvalidate your current auth credential stored in the cookie. This does not invalidate your API key.",
        "operationId": "logout",
        "responses": {
          "204": {
            "description": "Confirmation that your current auth credentials have been cleared"
          }
        }
      }
    },
    "/api/auth/me": {
      "get": {
        "tags": [
          "auth"
        ],
        "summary": "get_me",
        "description": "get_me\n\nGet the user corresponding to your current auth credentials.",
        "operationId": "get_me",
        "responses": {
          "200": {
            "description": "The user corresponding to your current auth credentials",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SlimUser"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Error message indicitating you are not currently signed in",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/chunk": {
      "post": {
        "tags": [
          "chunk"
        ],
        "summary": "create_chunk",
        "description": "create_chunk\n\nCreate a new chunk. If the chunk has the same tracking_id as an existing chunk, the request will fail. Once a chunk is created, it can be searched for using the search endpoint.",
        "operationId": "create_chunk",
        "requestBody": {
          "description": "JSON request payload to create a new chunk (chunk)",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateChunkData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "JSON response payload containing the created chunk",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReturnCreatedChunk"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Service error relating to to creating a chunk, likely due to conflicting tracking_id",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/chunk/gen_suggestions": {
      "post": {
        "tags": [
          "chunk"
        ],
        "operationId": "create_suggested_queries_handler",
        "requestBody": {
          "description": "JSON request payload to get alternative suggested queries",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SuggestedQueriesRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A JSON object containing a list of alternative suggested queries",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SuggestedQueriesResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Service error relating to to updating chunk, likely due to conflicting tracking_id",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/chunk/generate": {
      "post": {
        "tags": [
          "chunk"
        ],
        "operationId": "generate_off_chunks",
        "requestBody": {
          "description": "JSON request payload to perform RAG on some chunks (chunks)",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateChunksRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "This will be a HTTP stream, check the chat or search UI for an example how to process this"
          },
          "400": {
            "description": "Service error relating to to updating chunk, likely due to conflicting tracking_id",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/chunk/recommend": {
      "post": {
        "tags": [
          "chunk"
        ],
        "operationId": "get_recommended_chunks",
        "requestBody": {
          "description": "JSON request payload to get recommendations of chunks similar to the chunks in the request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RecommendChunksRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "JSON response payload containing chunks with scores which are similar to those in the request body",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ChunkMetadataWithFileData"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Service error relating to to getting similar chunks",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/chunk/search": {
      "post": {
        "tags": [
          "chunk"
        ],
        "operationId": "search_chunk",
        "requestBody": {
          "description": "JSON request payload to semantically search for chunks (chunks)",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchChunkData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "chunks which are similar to the embedding vector of the search query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SearchChunkQueryResponseBody"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Service error relating to searching",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/chunk/tracking_id/update": {
      "put": {
        "tags": [
          "chunk"
        ],
        "operationId": "update_chunk_by_tracking_id",
        "requestBody": {
          "description": "JSON request payload to update a chunk by tracking_id (chunks)",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateChunkByTrackingIdData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Confirmation that the chunk has been updated as per your request"
          },
          "400": {
            "description": "Service error relating to to updating chunk",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/chunk/tracking_id/{tracking_id}": {
      "get": {
        "tags": [
          "chunk"
        ],
        "operationId": "get_chunk_by_tracking_id",
        "parameters": [
          {
            "name": "tracking_id",
            "in": "path",
            "description": "tracking_id of the chunk you want to fetch",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "chunk with the tracking_id that you were searching for",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChunkMetadata"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Service error relating to fidning a chunk by tracking_id",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "chunk"
        ],
        "operationId": "delete_chunk_by_tracking_id",
        "parameters": [
          {
            "name": "tracking_id",
            "in": "path",
            "description": "tracking_id of the chunk you want to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Confirmation that the chunk with the tracking_id specified was deleted"
          },
          "400": {
            "description": "Service error relating to finding a chunk by tracking_id",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/chunk/update": {
      "put": {
        "tags": [
          "chunk"
        ],
        "operationId": "update_chunk",
        "requestBody": {
          "description": "JSON request payload to update a chunk (chunk)",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateChunkData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No content Ok response indicating the chunk was updated as requested"
          },
          "400": {
            "description": "Service error relating to to updating chunk, likely due to conflicting tracking_id",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/chunk/{chunk_id}": {
      "get": {
        "tags": [
          "chunk"
        ],
        "operationId": "get_chunk_by_id",
        "parameters": [
          {
            "name": "chunk_id",
            "in": "path",
            "description": "id of the chunk you want to fetch",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "chunk with the id that you were searching for",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChunkMetadata"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Service error relating to fidning a chunk by tracking_id",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "chunk"
        ],
        "operationId": "delete_chunk",
        "parameters": [
          {
            "name": "chunk_id",
            "in": "path",
            "description": "id of the chunk you want to delete",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Confirmation that the chunk with the id specified was deleted"
          },
          "400": {
            "description": "Service error relating to finding a chunk by tracking_id",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/chunk_collection": {
      "post": {
        "tags": [
          "chunk_collection"
        ],
        "operationId": "create_chunk_collection",
        "requestBody": {
          "description": "JSON request payload to cretea a chunkCollection",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateChunkCollectionData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns the created chunkCollection",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChunkCollection"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Service error relating to creating the chunkCollection",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "chunk_collection"
        ],
        "operationId": "update_chunk_collection",
        "requestBody": {
          "description": "JSON request payload to update a chunkCollection",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateChunkCollectionData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Confirmation that the chunkCollection was updated"
          },
          "400": {
            "description": "Service error relating to updating the chunkCollection",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "chunk_collection"
        ],
        "operationId": "delete_chunk_collection",
        "requestBody": {
          "description": "JSON request payload to delete a chunkCollection",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteCollectionData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Confirmation that the chunkCollection was deleted"
          },
          "400": {
            "description": "Service error relating to deleting the chunkCollection",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/chunk_collection/{collection_id}": {
      "post": {
        "tags": [
          "chunk_collection"
        ],
        "operationId": "add_bookmark",
        "parameters": [
          {
            "name": "collection_id",
            "in": "path",
            "description": "Id of the collection to add the chunk to as a bookmark",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "JSON request payload to add a chunk to a collection (bookmark it)",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddChunkToCollectionData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Confirmation that the chunk was added to the collection"
          },
          "400": {
            "description": "Service error relating to getting the collections that the chunk is in",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "chunk_collection"
        ],
        "operationId": "delete_bookmark",
        "parameters": [
          {
            "name": "collection_id",
            "in": "path",
            "description": "Id of the collection to remove the bookmark'ed chunk from",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "JSON request payload to remove a chunk to a collection (un-bookmark it)",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveBookmarkData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Confirmation that the chunk was removed to the collection"
          },
          "400": {
            "description": "Service error relating to removing the chunk from the collection",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/chunk_collection/{collection_id}/{page}": {
      "get": {
        "tags": [
          "chunk_collection"
        ],
        "operationId": "get_all_bookmarks",
        "parameters": [
          {
            "name": "collection_id",
            "in": "path",
            "description": "The id of the collection to get the chunks from",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "page",
            "in": "path",
            "description": "The page of chunks to get from the collection",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Bookmark'ed chunks present within the specified collection",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BookmarkData"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Service error relating to getting the collections that the chunk is in",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/chunk_collection/{page}": {
      "get": {
        "tags": [
          "chunk_collection"
        ],
        "operationId": "get_logged_in_user_chunk_collections",
        "parameters": [
          {
            "name": "page",
            "in": "path",
            "description": "The page of collections to fetch",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The page of collections for the auth'ed user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CollectionData"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Service error relating to getting the collections for the auth'ed user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/dataset": {
      "post": {
        "tags": [
          "dataset"
        ],
        "operationId": "create_dataset",
        "requestBody": {
          "description": "JSON request payload to create a new dataset",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDatasetRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Dataset created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Dataset"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Service error relating to creating the dataset",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "dataset"
        ],
        "operationId": "update_dataset",
        "requestBody": {
          "description": "JSON request payload to update a dataset",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDatasetRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Dataset updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Dataset"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Service error relating to updating the dataset",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "dataset"
        ],
        "operationId": "delete_dataset",
        "requestBody": {
          "description": "JSON request payload to delete a dataset",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteDatasetRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Dataset deleted successfully"
          },
          "400": {
            "description": "Service error relating to deleting the dataset",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/dataset/envs": {
      "get": {
        "tags": [
          "dataset"
        ],
        "operationId": "get_client_dataset_config",
        "responses": {
          "200": {
            "description": "Dataset environment variables",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ClientDatasetConfiguration"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/dataset/organization/{organization_id}": {
      "get": {
        "tags": [
          "dataset"
        ],
        "operationId": "get_datasets_from_organization",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "id of the organization you want to retrieve datasets for",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Dataset retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DatasetAndUsage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Service error relating to retrieving the dataset",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/dataset/{dataset_id}": {
      "get": {
        "tags": [
          "dataset"
        ],
        "operationId": "get_dataset",
        "parameters": [
          {
            "name": "dataset_id",
            "in": "path",
            "description": "id of the dataset you want to retrieve",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Dataset retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Dataset"
                }
              }
            }
          },
          "400": {
            "description": "Service error relating to retrieving the dataset",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/file": {
      "post": {
        "tags": [
          "file"
        ],
        "operationId": "upload_file_handler",
        "requestBody": {
          "description": "JSON request payload to upload a file",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UploadFileData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Confirmation that the file is uploading",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UploadFileResult"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Service error relating to uploading the file",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/file/{file_id}": {
      "get": {
        "tags": [
          "file"
        ],
        "operationId": "get_file_handler",
        "parameters": [
          {
            "name": "file_id",
            "in": "path",
            "description": "The id of the file to fetch",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The file corresponding to the file_id requested",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FileDTO"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Service error relating to finding the file",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "file"
        ],
        "operationId": "delete_file_handler",
        "parameters": [
          {
            "name": "file_id",
            "in": "path",
            "description": "The id of the file to delete",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Confirmation that the file has been deleted"
          },
          "400": {
            "description": "Service error relating to finding or deleting the file",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/health": {
      "get": {
        "tags": [
          "health"
        ],
        "operationId": "health_check",
        "responses": {
          "200": {
            "description": "Confirmation that the service is healthy and can make embedding vectors"
          },
          "400": {
            "description": "Service error relating to making an embedding or overall service health",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/image/{file_name}": {
      "get": {
        "tags": [
          "file"
        ],
        "operationId": "get_image_file",
        "parameters": [
          {
            "name": "file_name",
            "in": "path",
            "description": "The name of the image file to return",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The raw image file corresponding to the file_name requested such that it can be a src for an img tag"
          },
          "400": {
            "description": "Service error relating to finding the file",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/invitation": {
      "post": {
        "tags": [
          "invitation"
        ],
        "summary": "send_invitation",
        "description": "send_invitation\n\nInvitations act as a way to invite users to join an organization. After a user is invited, they will automatically be added to the organization with the role specified in the invitation once they set their.",
        "operationId": "post_invitation",
        "requestBody": {
          "description": "JSON request payload to send an invitation",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InvitationData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Ok"
          },
          "400": {
            "description": "Invalid email",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/message": {
      "post": {
        "tags": [
          "message"
        ],
        "operationId": "create_message_completion_handler",
        "requestBody": {
          "description": "JSON request payload to create a message completion",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMessageData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "This will be a HTTP stream, check the chat or search UI for an example how to process this"
          },
          "400": {
            "description": "Service error relating to getting a chat completion",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "message"
        ],
        "operationId": "edit_message_handler",
        "requestBody": {
          "description": "JSON request payload to edit a message and get a new stream",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditMessageData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "This will be a HTTP stream, check the chat or search UI for an example how to process this"
          },
          "400": {
            "description": "Service error relating to getting a chat completion",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "message"
        ],
        "operationId": "regenerate_message_handler",
        "requestBody": {
          "description": "JSON request payload to delete an agent message then regenerate it in a strem",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegenerateMessageData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "This will be a HTTP stream, check the chat or search UI for an example how to process this"
          },
          "400": {
            "description": "Service error relating to getting a chat completion",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/messages/{messages_topic_id}": {
      "get": {
        "tags": [
          "message"
        ],
        "operationId": "get_all_topic_messages",
        "parameters": [
          {
            "name": "messages_topic_id",
            "in": "path",
            "description": "The ID of the topic to get messages for",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All messages relating to the topic with the given ID",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Message"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Service error relating to getting the messages",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/notifications": {
      "put": {
        "tags": [
          "notifications"
        ],
        "operationId": "mark_notification_as_read",
        "requestBody": {
          "description": "JSON request payload with id of notification to mark read",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NotificationId"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Confirmation that the notification is marked read"
          },
          "400": {
            "description": "Service error relating to finding the notification and marking it read",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/notifications/{page}": {
      "get": {
        "tags": [
          "notifications"
        ],
        "operationId": "get_notifications",
        "parameters": [
          {
            "name": "page",
            "in": "path",
            "description": "Page number of notifications to get",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Notifications for the user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NotificationReturn"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Service error relating to getting notifications for the user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/notifications_readall": {
      "put": {
        "tags": [
          "notifications"
        ],
        "operationId": "mark_all_notifications_as_read",
        "responses": {
          "204": {
            "description": "Confirmation that the all notification were marked read for the auth'ed user"
          },
          "400": {
            "description": "Service error relating to finding the notifications for the auth'ed user and marking them read",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/organization": {
      "post": {
        "tags": [
          "organization"
        ],
        "summary": "Create a new organization, the user that creates the organization becomes the owner",
        "description": "Create a new organization, the user that creates the organization becomes the owner",
        "operationId": "create_organization",
        "requestBody": {
          "description": "The organization data that you want to create",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrganizationData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Created organization object",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Organization"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Service error relating to creating the organization",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "organization"
        ],
        "operationId": "update_organization",
        "requestBody": {
          "description": "The organization data that you want to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrganizationData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Updated organization object",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Organization"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Service error relating to updating the organization",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/organization/{organization_id}": {
      "get": {
        "tags": [
          "organization"
        ],
        "operationId": "get_organization_by_id",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "id of the organization you want to fetch",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Organization with the id that was requested",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Organization"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Service error relating to finding the organization by id",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/stripe/payment_link/{plan_id}/{organization_id}": {
      "get": {
        "tags": [
          "stripe"
        ],
        "operationId": "direct_to_payment_link",
        "parameters": [
          {
            "name": "plan_id",
            "in": "path",
            "description": "id of the plan you want to subscribe to",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "organization_id",
            "in": "path",
            "description": "id of the organization you want to subscribe to the plan",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "303": {
            "description": "SeeOther response redirecting user to stripe checkout page"
          },
          "400": {
            "description": "Service error relating to creating a URL for a stripe checkout page",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/stripe/plans": {
      "get": {
        "tags": [
          "stripe"
        ],
        "operationId": "get_all_plans",
        "responses": {
          "200": {
            "description": "List of all plans",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/StripePlan"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Service error relating to getting all plans",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/stripe/subscription/{subscription_id}": {
      "delete": {
        "tags": [
          "stripe"
        ],
        "operationId": "cancel_subscription",
        "parameters": [
          {
            "name": "subscription_id",
            "in": "path",
            "description": "id of the subscription you want to cancel",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Confirmation that the subscription was cancelled"
          },
          "400": {
            "description": "Service error relating to creating a URL for a stripe checkout page",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/stripe/subscription_plan/{subscription_id}/{plan_id}": {
      "patch": {
        "tags": [
          "stripe"
        ],
        "operationId": "update_subscription_plan",
        "parameters": [
          {
            "name": "subscription_id",
            "in": "path",
            "description": "id of the subscription you want to update",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "plan_id",
            "in": "path",
            "description": "id of the plan you want to subscribe to",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Confirmation that the subscription was updated to the new plan"
          },
          "400": {
            "description": "Service error relating to updating the subscription to the new plan",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/topic": {
      "get": {
        "tags": [
          "topic"
        ],
        "operationId": "get_all_topics",
        "responses": {
          "200": {
            "description": "All topics belonging to a given user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Topic"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Service error relating to topic get",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "topic"
        ],
        "summary": "create_topic",
        "description": "create_topic\n\nCreate a new chat topic. Topics are attached to a user and act as a coordinator for memory of gen-AI chat sessions.",
        "operationId": "create_topic",
        "requestBody": {
          "description": "JSON request payload to create chat topic",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTopicData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The JSON response payload containing the created topic",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Topic"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Topic name empty or a service error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "topic"
        ],
        "operationId": "update_topic",
        "requestBody": {
          "description": "JSON request payload to update a chat topic",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTopicData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Confirmation that the topic was updated"
          },
          "400": {
            "description": "Service error relating to topic update",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "topic"
        ],
        "summary": "delete_topic",
        "description": "delete_topic\n\nDelete an existing chat topic. When a topic is deleted, all associated chat messages are also deleted.",
        "operationId": "delete_topic",
        "requestBody": {
          "description": "JSON request payload to delete a chat topic",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteTopicData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Confirmation that the topic was deleted"
          },
          "400": {
            "description": "Service error relating to topic deletion",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/user": {
      "put": {
        "tags": [
          "user"
        ],
        "summary": "update_user",
        "description": "update_user\n\nUpdate a user's information. If the user_id is not provided, the auth'ed user will be updated. If the user_id is provided, the auth'ed user must be an admin (1) or owner (2) of the organization.",
        "operationId": "update_user",
        "requestBody": {
          "description": "JSON request payload to update user information for the auth'ed user",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "JSON body representing the updated user information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SlimUser"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Service error relating to updating the user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/user/collections/{user_id}/{page}": {
      "get": {
        "tags": [
          "user"
        ],
        "operationId": "get_specific_user_chunk_collections",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "The id of the user to fetch collections for",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "page",
            "in": "path",
            "description": "The page of collections to fetch",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "JSON body representing the collections created by the given user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CollectionData"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Service error relating to getting the collections created by the given user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/user/files/{user_id}": {
      "get": {
        "tags": [
          "user"
        ],
        "operationId": "get_user_files_handler",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "The id of the user to fetch files for",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "JSON body representing the files uploaded by the given user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/File"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Service error relating to getting the files uploaded by the given user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/user/set_api_key": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "set_user_api_key",
        "description": "set_user_api_key\n\nCreate a new api key for the auth'ed user.",
        "operationId": "set_user_api_key",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetUserApiKeyRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "JSON body representing the api_key for the user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SetUserApiKeyResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Service error relating to creating api_key for the user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/user/{user_id}/{page}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "get_user_chunks",
        "description": "get_user_chunks\n\nGet the chunks which were made by a given user.",
        "operationId": "get_user_with_chunks_by_id",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "The id of the user to fetch.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "page",
            "in": "path",
            "description": "The page of chunks to fetch. Each page is 10 chunks. Support for custom page size is coming soon.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "JSON body representing the chunks made by a given user with their chunks",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserDTOWithChunks"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Service error relating to getting the chunks for the given user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AddChunkToCollectionData": {
        "type": "object",
        "required": [
          "chunk_metadata_id"
        ],
        "properties": {
          "chunk_metadata_id": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "AuthData": {
        "type": "object",
        "required": [
          "email",
          "password"
        ],
        "properties": {
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        }
      },
      "AuthQuery": {
        "type": "object",
        "properties": {
          "inv_code": {
            "type": "string",
            "format": "uuid",
            "description": "Code sent via email as a result of successful call to send_invitation",
            "nullable": true
          },
          "organization_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of organization to authenticate into",
            "nullable": true
          },
          "redirect_uri": {
            "type": "string",
            "description": "URL to redirect to after successful login",
            "nullable": true
          }
        }
      },
      "BookmarkChunks": {
        "type": "object",
        "required": [
          "metadata"
        ],
        "properties": {
          "metadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChunkMetadataWithFileData"
            }
          }
        }
      },
      "BookmarkCollectionResult": {
        "type": "object",
        "required": [
          "chunk_uuid",
          "slim_collections"
        ],
        "properties": {
          "chunk_uuid": {
            "type": "string",
            "format": "uuid"
          },
          "slim_collections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SlimCollection"
            }
          }
        }
      },
      "BookmarkData": {
        "type": "object",
        "required": [
          "bookmarks",
          "collection",
          "total_pages"
        ],
        "properties": {
          "bookmarks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BookmarkChunks"
            }
          },
          "collection": {
            "$ref": "#/components/schemas/ChunkCollection"
          },
          "total_pages": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ChatMessageProxy": {
        "type": "object",
        "required": [
          "role",
          "content"
        ],
        "properties": {
          "content": {
            "type": "string"
          },
          "role": {
            "type": "string"
          }
        }
      },
      "ChunkCollection": {
        "type": "object",
        "required": [
          "id",
          "author_id",
          "name",
          "description",
          "created_at",
          "updated_at",
          "dataset_id"
        ],
        "properties": {
          "author_id": {
            "type": "string",
            "format": "uuid"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "dataset_id": {
            "type": "string",
            "format": "uuid"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ChunkCollectionAndFile": {
        "type": "object",
        "required": [
          "id",
          "author_id",
          "name",
          "description",
          "created_at",
          "updated_at"
        ],
        "properties": {
          "author_id": {
            "type": "string",
            "format": "uuid"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "description": {
            "type": "string"
          },
          "file_id": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ChunkMetadata": {
        "type": "object",
        "required": [
          "id",
          "content",
          "author_id",
          "created_at",
          "updated_at",
          "dataset_id",
          "weight"
        ],
        "properties": {
          "author_id": {
            "type": "string",
            "format": "uuid"
          },
          "chunk_html": {
            "type": "string",
            "nullable": true
          },
          "content": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "dataset_id": {
            "type": "string",
            "format": "uuid"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "link": {
            "type": "string",
            "nullable": true
          },
          "metadata": {
            "nullable": true
          },
          "qdrant_point_id": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "tag_set": {
            "type": "string",
            "nullable": true
          },
          "time_stamp": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "tracking_id": {
            "type": "string",
            "nullable": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "weight": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "ChunkMetadataWithFileData": {
        "type": "object",
        "required": [
          "id",
          "content",
          "qdrant_point_id",
          "created_at",
          "updated_at",
          "weight"
        ],
        "properties": {
          "author": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserDTO"
              }
            ],
            "nullable": true
          },
          "chunk_html": {
            "type": "string",
            "nullable": true
          },
          "content": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "file_id": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "file_name": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "link": {
            "type": "string",
            "nullable": true
          },
          "metadata": {
            "nullable": true
          },
          "qdrant_point_id": {
            "type": "string",
            "format": "uuid"
          },
          "tag_set": {
            "type": "string",
            "nullable": true
          },
          "time_stamp": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "tracking_id": {
            "type": "string",
            "nullable": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "weight": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "ClientDatasetConfiguration": {
        "type": "object",
        "properties": {
          "CREATE_CHUNK_FEATURE": {
            "type": "boolean",
            "nullable": true
          },
          "DATE_RANGE_VALUE": {
            "type": "string",
            "nullable": true
          },
          "DOCUMENT_UPLOAD_FEATURE": {
            "type": "boolean",
            "nullable": true
          },
          "FILTER_ITEMS": {
            "nullable": true
          },
          "FRONTMATTER_VALS": {
            "type": "string",
            "nullable": true
          },
          "IMAGE_RANGE_END_KEY": {
            "type": "string",
            "nullable": true
          },
          "IMAGE_RANGE_START_KEY": {
            "type": "string",
            "nullable": true
          },
          "LINES_BEFORE_SHOW_MORE": {
            "type": "integer",
            "nullable": true,
            "minimum": 0
          },
          "SEARCH_QUERIES": {
            "type": "string",
            "nullable": true
          },
          "SHOW_GITHUB_STARS": {
            "type": "boolean",
            "nullable": true
          },
          "SUGGESTED_QUERIES": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "CollectionData": {
        "type": "object",
        "required": [
          "collections",
          "total_pages"
        ],
        "properties": {
          "collections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChunkCollectionAndFile"
            }
          },
          "total_pages": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "CreateChunkCollectionData": {
        "type": "object",
        "required": [
          "name",
          "description"
        ],
        "properties": {
          "description": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "CreateChunkData": {
        "type": "object",
        "properties": {
          "chunk_html": {
            "type": "string",
            "description": "HTML content of the chunk. This can also be plaintext. The innerText of the HTML will be used to create the embedding vector. The point of using HTML is for convienience, as some users have applications where users submit HTML content.",
            "nullable": true
          },
          "chunk_vector": {
            "type": "array",
            "items": {
              "type": "number",
              "format": "float"
            },
            "description": "The chunk_vector is a vector of floats which can be used to create a custom embedding for the chunk. This is useful for when you want to create a custom embedding for a chunk. If this is not provided, the innerText of the chunk_html will be used to create the embedding.",
            "nullable": true
          },
          "collection_id": {
            "type": "string",
            "format": "uuid",
            "description": "The collection_id is the id of the collection that the chunk should be placed into. This is useful for when you want to create a chunk and add it to a collection in one request.",
            "nullable": true
          },
          "file_uuid": {
            "type": "string",
            "format": "uuid",
            "description": "The file_uuid is the uuid of the file that the chunk is associated with. This is used to associate chunks with files. This is useful for when you want to delete a file and all of its associated chunks.",
            "nullable": true
          },
          "link": {
            "type": "string",
            "description": "Link to the chunk. This can also be any string. Frequently, this is a link to the source of the chunk. The link value will not affect the embedding creation.",
            "nullable": true
          },
          "metadata": {
            "description": "The metadata is a JSON object which can be used to filter chunks. This is useful for when you want to filter chunks by arbitrary metadata. Unlike with tag filtering, there is a performance hit for filtering on metadata.",
            "nullable": true
          },
          "tag_set": {
            "type": "string",
            "description": "The tag set is a comma separated list of tags. This can be used to filter chunks by tag. Unlike with metadata filtering, HNSW indices will exist for each tag such that there is not a performance hit for filtering on them.",
            "nullable": true
          },
          "time_stamp": {
            "type": "string",
            "description": "The time_stamp should be an ISO 8601 combined date and time without timezone. It is used for time window filtering and recency-biasing search results.",
            "nullable": true
          },
          "tracking_id": {
            "type": "string",
            "description": "The tracking_id is a string which can be used to identify a chunk. This is useful for when you are coordinating with an external system and want to use the tracking_id to identify the chunk. This is also useful for when you want to update a chunk by tracking_id.",
            "nullable": true
          },
          "weight": {
            "type": "number",
            "format": "double",
            "description": "The weight is a float which can be used to bias search results. This is useful for when you want to bias search results for a chunk. The magnitude only matters relative to other chunks in the chunk's dataset dataset.",
            "nullable": true
          }
        }
      },
      "CreateDatasetRequest": {
        "type": "object",
        "required": [
          "dataset_name",
          "organization_id",
          "server_configuration",
          "client_configuration"
        ],
        "properties": {
          "client_configuration": {},
          "dataset_name": {
            "type": "string"
          },
          "organization_id": {
            "type": "string",
            "format": "uuid"
          },
          "server_configuration": {}
        }
      },
      "CreateMessageData": {
        "type": "object",
        "required": [
          "new_message_content",
          "topic_id"
        ],
        "properties": {
          "new_message_content": {
            "type": "string"
          },
          "topic_id": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "CreateOrganizationData": {
        "type": "object",
        "required": [
          "name",
          "configuration"
        ],
        "properties": {
          "configuration": {},
          "name": {
            "type": "string"
          }
        }
      },
      "CreateTopicData": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "normal_chat": {
            "type": "boolean",
            "nullable": true
          }
        }
      },
      "Dataset": {
        "type": "object",
        "required": [
          "id",
          "name",
          "created_at",
          "updated_at",
          "organization_id",
          "server_configuration",
          "client_configuration"
        ],
        "properties": {
          "client_configuration": {},
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "organization_id": {
            "type": "string",
            "format": "uuid"
          },
          "server_configuration": {},
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "DatasetAndOrgWithSubAndPlan": {
        "type": "object",
        "required": [
          "dataset",
          "organization"
        ],
        "properties": {
          "dataset": {
            "$ref": "#/components/schemas/Dataset"
          },
          "organization": {
            "$ref": "#/components/schemas/OrganizationWithSubAndPlan"
          }
        }
      },
      "DatasetAndUsage": {
        "type": "object",
        "required": [
          "dataset",
          "dataset_usage"
        ],
        "properties": {
          "dataset": {
            "$ref": "#/components/schemas/DatasetDTO"
          },
          "dataset_usage": {
            "$ref": "#/components/schemas/DatasetUsageCount"
          }
        }
      },
      "DatasetDTO": {
        "type": "object",
        "required": [
          "id",
          "name",
          "created_at",
          "updated_at",
          "organization_id",
          "client_configuration"
        ],
        "properties": {
          "client_configuration": {},
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "organization_id": {
            "type": "string",
            "format": "uuid"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "DatasetUsageCount": {
        "type": "object",
        "required": [
          "id",
          "dataset_id",
          "chunk_count"
        ],
        "properties": {
          "chunk_count": {
            "type": "integer",
            "format": "int32"
          },
          "dataset_id": {
            "type": "string",
            "format": "uuid"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "DefaultError": {
        "type": "object",
        "required": [
          "message"
        ],
        "properties": {
          "message": {
            "type": "string"
          }
        }
      },
      "DeleteCollectionData": {
        "type": "object",
        "required": [
          "collection_id"
        ],
        "properties": {
          "collection_id": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "DeleteDatasetRequest": {
        "type": "object",
        "required": [
          "dataset_id"
        ],
        "properties": {
          "dataset_id": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "DeleteTopicData": {
        "type": "object",
        "required": [
          "topic_id"
        ],
        "properties": {
          "topic_id": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "EditMessageData": {
        "type": "object",
        "required": [
          "topic_id",
          "message_sort_order",
          "new_message_content"
        ],
        "properties": {
          "message_sort_order": {
            "type": "integer",
            "format": "int32"
          },
          "new_message_content": {
            "type": "string"
          },
          "topic_id": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "File": {
        "type": "object",
        "required": [
          "id",
          "user_id",
          "file_name",
          "created_at",
          "updated_at",
          "size",
          "dataset_id"
        ],
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "dataset_id": {
            "type": "string",
            "format": "uuid"
          },
          "file_name": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "link": {
            "type": "string",
            "nullable": true
          },
          "metadata": {
            "nullable": true
          },
          "size": {
            "type": "integer",
            "format": "int64"
          },
          "tag_set": {
            "type": "string",
            "nullable": true
          },
          "time_stamp": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "user_id": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "FileDTO": {
        "type": "object",
        "required": [
          "id",
          "user_id",
          "file_name",
          "created_at",
          "updated_at",
          "size",
          "base64url_content"
        ],
        "properties": {
          "base64url_content": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "file_name": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "link": {
            "type": "string",
            "nullable": true
          },
          "metadata": {
            "nullable": true
          },
          "size": {
            "type": "integer",
            "format": "int64"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "user_id": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "FileUploadCompletedNotificationWithName": {
        "type": "object",
        "required": [
          "id",
          "user_uuid",
          "collection_uuid",
          "user_read",
          "created_at",
          "updated_at"
        ],
        "properties": {
          "collection_name": {
            "type": "string",
            "nullable": true
          },
          "collection_uuid": {
            "type": "string",
            "format": "uuid"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "user_read": {
            "type": "boolean"
          },
          "user_uuid": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "GenerateChunksRequest": {
        "type": "object",
        "required": [
          "prev_messages",
          "chunk_ids"
        ],
        "properties": {
          "chunk_ids": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "prev_messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatMessageProxy"
            }
          }
        }
      },
      "GenerateOffCollectionData": {
        "type": "object",
        "required": [
          "collection_id"
        ],
        "properties": {
          "collection_id": {
            "type": "string",
            "format": "uuid"
          },
          "page": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "minimum": 0
          },
          "query": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "GetAllBookmarksData": {
        "type": "object",
        "required": [
          "collection_id"
        ],
        "properties": {
          "collection_id": {
            "type": "string",
            "format": "uuid"
          },
          "page": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "minimum": 0
          }
        }
      },
      "GetCollectionsForChunksData": {
        "type": "object",
        "required": [
          "chunk_ids"
        ],
        "properties": {
          "chunk_ids": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          }
        }
      },
      "GetDirectPaymentLinkData": {
        "type": "object",
        "required": [
          "plan_id",
          "organization_id"
        ],
        "properties": {
          "organization_id": {
            "type": "string",
            "format": "uuid"
          },
          "plan_id": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "GetUserWithChunksData": {
        "type": "object",
        "required": [
          "user_id",
          "page"
        ],
        "properties": {
          "page": {
            "type": "integer",
            "format": "int64",
            "description": "The page of chunks to fetch. Each page is 10 chunks. Support for custom page size is coming soon."
          },
          "user_id": {
            "type": "string",
            "format": "uuid",
            "description": "The id of the user to fetch the chunks for."
          }
        }
      },
      "InvitationData": {
        "type": "object",
        "required": [
          "organization_id",
          "user_role",
          "email",
          "app_url",
          "redirect_uri"
        ],
        "properties": {
          "app_url": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "organization_id": {
            "type": "string",
            "format": "uuid"
          },
          "redirect_uri": {
            "type": "string"
          },
          "user_role": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "Message": {
        "type": "object",
        "required": [
          "id",
          "topic_id",
          "sort_order",
          "content",
          "role",
          "deleted",
          "created_at",
          "updated_at",
          "dataset_id"
        ],
        "properties": {
          "completion_tokens": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "content": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "dataset_id": {
            "type": "string",
            "format": "uuid"
          },
          "deleted": {
            "type": "boolean"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "prompt_tokens": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "role": {
            "type": "string"
          },
          "sort_order": {
            "type": "integer",
            "format": "int32"
          },
          "topic_id": {
            "type": "string",
            "format": "uuid"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Notification": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/FileUploadCompletedNotificationWithName"
          }
        ]
      },
      "NotificationId": {
        "type": "object",
        "required": [
          "notification_id"
        ],
        "properties": {
          "notification_id": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "NotificationReturn": {
        "type": "object",
        "required": [
          "notifications",
          "full_count",
          "total_pages"
        ],
        "properties": {
          "full_count": {
            "type": "integer",
            "format": "int32"
          },
          "notifications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Notification"
            }
          },
          "total_pages": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "Organization": {
        "type": "object",
        "required": [
          "id",
          "name",
          "created_at",
          "updated_at"
        ],
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "registerable": {
            "type": "boolean",
            "nullable": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "OrganizationWithSubAndPlan": {
        "type": "object",
        "required": [
          "id",
          "name",
          "created_at",
          "updated_at"
        ],
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "plan": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StripePlan"
              }
            ],
            "nullable": true
          },
          "registerable": {
            "type": "boolean",
            "nullable": true
          },
          "subscription": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StripeSubscription"
              }
            ],
            "nullable": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "RecommendChunksRequest": {
        "type": "object",
        "required": [
          "positive_chunk_ids"
        ],
        "properties": {
          "positive_chunk_ids": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          }
        }
      },
      "RegenerateMessageData": {
        "type": "object",
        "required": [
          "topic_id"
        ],
        "properties": {
          "topic_id": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "RemoveBookmarkData": {
        "type": "object",
        "required": [
          "chunk_metadata_id"
        ],
        "properties": {
          "chunk_metadata_id": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "ReturnCreatedChunk": {
        "type": "object",
        "required": [
          "chunk_metadata",
          "duplicate"
        ],
        "properties": {
          "chunk_metadata": {
            "$ref": "#/components/schemas/ChunkMetadata"
          },
          "duplicate": {
            "type": "boolean"
          }
        }
      },
      "ScoreChunkDTO": {
        "type": "object",
        "required": [
          "metadata",
          "score"
        ],
        "properties": {
          "metadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChunkMetadataWithFileData"
            }
          },
          "score": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "SearchChunkData": {
        "type": "object",
        "required": [
          "search_type",
          "content"
        ],
        "properties": {
          "content": {
            "type": "string"
          },
          "cross_encoder": {
            "type": "boolean",
            "nullable": true
          },
          "date_bias": {
            "type": "boolean",
            "nullable": true
          },
          "filters": {
            "nullable": true
          },
          "link": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "page": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "minimum": 0
          },
          "search_type": {
            "type": "string"
          },
          "tag_set": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "time_range": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "type": "string"
                },
                {
                  "type": "string"
                }
              ]
            },
            "nullable": true
          },
          "weights": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "type": "number",
                  "format": "double"
                },
                {
                  "type": "number",
                  "format": "double"
                }
              ]
            },
            "nullable": true
          }
        }
      },
      "SearchChunkQueryResponseBody": {
        "type": "object",
        "required": [
          "score_chunks",
          "total_chunk_pages"
        ],
        "properties": {
          "score_chunks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScoreChunkDTO"
            }
          },
          "total_chunk_pages": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "SearchCollectionsData": {
        "type": "object",
        "required": [
          "content",
          "collection_id",
          "search_type"
        ],
        "properties": {
          "collection_id": {
            "type": "string",
            "format": "uuid"
          },
          "content": {
            "type": "string"
          },
          "date_bias": {
            "type": "boolean",
            "nullable": true
          },
          "filters": {
            "nullable": true
          },
          "link": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "page": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "minimum": 0
          },
          "search_type": {
            "type": "string"
          },
          "tag_set": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        }
      },
      "SearchCollectionsResult": {
        "type": "object",
        "required": [
          "bookmarks",
          "collection",
          "total_pages"
        ],
        "properties": {
          "bookmarks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScoreChunkDTO"
            }
          },
          "collection": {
            "$ref": "#/components/schemas/ChunkCollection"
          },
          "total_pages": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "SetUserApiKeyRequest": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The name which will be assigned to the new api key."
          }
        }
      },
      "SetUserApiKeyResponse": {
        "type": "object",
        "required": [
          "api_key"
        ],
        "properties": {
          "api_key": {
            "type": "string",
            "description": "The api key which was created. This is the value which should be used in the Authorization header."
          }
        }
      },
      "SlimCollection": {
        "type": "object",
        "required": [
          "id",
          "name",
          "author_id",
          "of_current_user"
        ],
        "properties": {
          "author_id": {
            "type": "string",
            "format": "uuid"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "of_current_user": {
            "type": "boolean"
          }
        }
      },
      "SlimUser": {
        "type": "object",
        "required": [
          "id",
          "email",
          "visible_email",
          "user_orgs",
          "orgs"
        ],
        "properties": {
          "email": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "orgs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Organization"
            }
          },
          "user_orgs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserOrganization"
            }
          },
          "username": {
            "type": "string",
            "nullable": true
          },
          "visible_email": {
            "type": "boolean"
          },
          "website": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "StripePlan": {
        "type": "object",
        "required": [
          "id",
          "stripe_id",
          "chunk_count",
          "file_storage",
          "user_count",
          "dataset_count",
          "message_count",
          "amount",
          "created_at",
          "updated_at",
          "name"
        ],
        "properties": {
          "amount": {
            "type": "integer",
            "format": "int64"
          },
          "chunk_count": {
            "type": "integer",
            "format": "int32"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "dataset_count": {
            "type": "integer",
            "format": "int32"
          },
          "file_storage": {
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "message_count": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "stripe_id": {
            "type": "string"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "user_count": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "StripeSubscription": {
        "type": "object",
        "required": [
          "id",
          "stripe_id",
          "plan_id",
          "organization_id",
          "created_at",
          "updated_at"
        ],
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "current_period_end": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "organization_id": {
            "type": "string",
            "format": "uuid"
          },
          "plan_id": {
            "type": "string",
            "format": "uuid"
          },
          "stripe_id": {
            "type": "string"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "SuggestedQueriesRequest": {
        "type": "object",
        "required": [
          "query"
        ],
        "properties": {
          "query": {
            "type": "string"
          }
        }
      },
      "SuggestedQueriesResponse": {
        "type": "object",
        "required": [
          "queries"
        ],
        "properties": {
          "queries": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Topic": {
        "type": "object",
        "required": [
          "id",
          "user_id",
          "name",
          "side",
          "deleted",
          "created_at",
          "updated_at",
          "normal_chat",
          "dataset_id"
        ],
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "dataset_id": {
            "type": "string",
            "format": "uuid"
          },
          "deleted": {
            "type": "boolean"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "normal_chat": {
            "type": "boolean"
          },
          "side": {
            "type": "boolean"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "user_id": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "UpdateChunkByTrackingIdData": {
        "type": "object",
        "required": [
          "tracking_id"
        ],
        "properties": {
          "chunk_html": {
            "type": "string",
            "nullable": true
          },
          "chunk_uuid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "link": {
            "type": "string",
            "nullable": true
          },
          "metadata": {
            "nullable": true
          },
          "time_stamp": {
            "type": "string",
            "nullable": true
          },
          "tracking_id": {
            "type": "string"
          },
          "weight": {
            "type": "number",
            "format": "double",
            "nullable": true
          }
        }
      },
      "UpdateChunkCollectionData": {
        "type": "object",
        "required": [
          "collection_id"
        ],
        "properties": {
          "collection_id": {
            "type": "string",
            "format": "uuid"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "UpdateChunkData": {
        "type": "object",
        "required": [
          "chunk_uuid"
        ],
        "properties": {
          "chunk_html": {
            "type": "string",
            "nullable": true
          },
          "chunk_uuid": {
            "type": "string",
            "format": "uuid"
          },
          "link": {
            "type": "string",
            "nullable": true
          },
          "metadata": {
            "nullable": true
          },
          "time_stamp": {
            "type": "string",
            "nullable": true
          },
          "tracking_id": {
            "type": "string",
            "nullable": true
          },
          "weight": {
            "type": "number",
            "format": "double",
            "nullable": true
          }
        }
      },
      "UpdateDatasetRequest": {
        "type": "object",
        "required": [
          "dataset_id"
        ],
        "properties": {
          "client_configuration": {
            "nullable": true
          },
          "dataset_id": {
            "type": "string",
            "format": "uuid"
          },
          "dataset_name": {
            "type": "string",
            "nullable": true
          },
          "server_configuration": {
            "nullable": true
          }
        }
      },
      "UpdateOrganizationData": {
        "type": "object",
        "required": [
          "organization_uuid"
        ],
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "organization_uuid": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "UpdateSubscriptionData": {
        "type": "object",
        "required": [
          "subscription_id",
          "plan_id"
        ],
        "properties": {
          "plan_id": {
            "type": "string",
            "format": "uuid"
          },
          "subscription_id": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "UpdateTopicData": {
        "type": "object",
        "required": [
          "topic_id",
          "name",
          "side"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "side": {
            "type": "boolean"
          },
          "topic_id": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "UpdateUserData": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "In the sense of a legal name, not a username. The new name to assign to the user, if not provided, the current name will be used.",
            "nullable": true
          },
          "role": {
            "type": "integer",
            "format": "int32",
            "description": "Either 0 (user), 1 (admin), or 2 (owner). If not provided, the current role will be used. The auth'ed user must have a role greater than or equal to the role being assigned.",
            "nullable": true
          },
          "user_id": {
            "type": "string",
            "format": "uuid",
            "description": "The id of the user to update, if not provided, the auth'ed user will be updated. If provided, the auth'ed user must be an admin (1) or owner (2) of the organization.",
            "nullable": true
          },
          "username": {
            "type": "string",
            "description": "The new username to assign to the user, if not provided, the current username will be used.",
            "nullable": true
          },
          "visible_email": {
            "type": "boolean",
            "description": "Determines if the user's email is visible to other users, if not provided, the current value will be used.",
            "nullable": true
          },
          "website": {
            "type": "string",
            "description": "The new website to assign to the user, if not provided, the current website will be used.",
            "nullable": true
          }
        }
      },
      "UploadFileData": {
        "type": "object",
        "required": [
          "base64_docx_file",
          "file_name",
          "file_mime_type"
        ],
        "properties": {
          "base64_docx_file": {
            "type": "string"
          },
          "create_chunks": {
            "type": "boolean",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "file_mime_type": {
            "type": "string"
          },
          "file_name": {
            "type": "string"
          },
          "link": {
            "type": "string",
            "nullable": true
          },
          "metadata": {
            "nullable": true
          },
          "tag_set": {
            "type": "string",
            "nullable": true
          },
          "time_stamp": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "UploadFileResult": {
        "type": "object",
        "required": [
          "file_metadata"
        ],
        "properties": {
          "file_metadata": {
            "$ref": "#/components/schemas/File"
          }
        }
      },
      "UserCollectionQuery": {
        "type": "object",
        "required": [
          "user_id",
          "page"
        ],
        "properties": {
          "page": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "user_id": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "UserDTO": {
        "type": "object",
        "required": [
          "id",
          "visible_email",
          "created_at"
        ],
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "username": {
            "type": "string",
            "nullable": true
          },
          "visible_email": {
            "type": "boolean"
          },
          "website": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "UserDTOWithChunks": {
        "type": "object",
        "required": [
          "id",
          "visible_email",
          "created_at",
          "total_chunks_created",
          "chunks"
        ],
        "properties": {
          "chunks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChunkMetadataWithFileData"
            }
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "total_chunks_created": {
            "type": "integer",
            "format": "int64"
          },
          "username": {
            "type": "string",
            "nullable": true
          },
          "visible_email": {
            "type": "boolean"
          },
          "website": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "UserOrganization": {
        "type": "object",
        "required": [
          "id",
          "user_id",
          "organization_id",
          "role",
          "created_at",
          "updated_at"
        ],
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "organization_id": {
            "type": "string",
            "format": "uuid"
          },
          "role": {
            "type": "integer",
            "format": "int32"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "user_id": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "UserRole": {
        "type": "string",
        "enum": [
          "Owner",
          "Admin",
          "User"
        ]
      }
    }
  },
  "tags": [
    {
      "name": "invitation",
      "description": "Invitation endpoint"
    },
    {
      "name": "auth",
      "description": "Authentication endpoint"
    },
    {
      "name": "user",
      "description": "User endpoint"
    },
    {
      "name": "organization",
      "description": "Organization endpoint"
    },
    {
      "name": "dataset",
      "description": "Dataset endpoint"
    },
    {
      "name": "chunk",
      "description": "Chunk endpoint"
    },
    {
      "name": "chunk_collection",
      "description": "Chunk collection/bookmarks endpoint"
    },
    {
      "name": "file",
      "description": "File endpoint"
    },
    {
      "name": "notifications",
      "description": "Notifications endpoint"
    },
    {
      "name": "topic",
      "description": "Topic chat endpoint"
    },
    {
      "name": "message",
      "description": "Message chat endpoint"
    },
    {
      "name": "stripe",
      "description": "Stripe endpoint"
    },
    {
      "name": "health",
      "description": "Health check endpoint"
    }
  ]
}