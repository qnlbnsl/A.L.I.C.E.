{
  "openapi": "3.0.3",
  "info": {
    "title": "vault-server",
    "description": "Arguflow REST API OpenAPI Documentation",
    "license": {
      "name": ""
    },
    "version": "1.0.0"
  },
  "paths": {
    "/api/auth": {
      "get": {
        "tags": [
          "auth"
        ],
        "operationId": "get_me",
        "responses": {
          "200": {
            "description": "The user corresponding to your current auth credentials",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SlimUser"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Error message indicitating you are not currently signed in",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "auth"
        ],
        "operationId": "login",
        "requestBody": {
          "description": "JSON request payload to sign in",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Response that returns with set-cookie header",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SlimUser"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Email or password empty or incorrect",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "auth"
        ],
        "operationId": "logout",
        "responses": {
          "204": {
            "description": "Confirmation that your current auth credentials have been cleared"
          }
        }
      }
    },
    "/api/card": {
      "post": {
        "tags": [
          "card"
        ],
        "operationId": "create_card",
        "requestBody": {
          "description": "JSON request payload to create a new card (chunk)",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCardData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "JSON response payload containing the created card",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReturnCreatedCard"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Service error relating to to creating a card, likely due to conflicting tracking_id",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/card/count": {
      "get": {
        "tags": [
          "card"
        ],
        "operationId": "get_total_card_count",
        "responses": {}
      }
    },
    "/api/card/fulltextsearch": {
      "post": {
        "tags": [
          "card"
        ],
        "operationId": "search_full_text_card",
        "parameters": [
          {
            "name": "page",
            "in": "path",
            "description": "Page number of the search results Set to 0 if you want all results",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "nullable": false,
              "minimum": 0
            }
          }
        ],
        "requestBody": {
          "description": "JSON request payload to full text search for cards (chunks)",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchCardData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Cards which have text with a postgres ts_vector similar to the ts_vector of the search query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SearchCardQueryResponseBody"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Service error relating to to searcing for the card",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/card/fulltextsearch/{page}": {
      "post": {
        "tags": [
          "card"
        ],
        "operationId": "create_suggested_queries_handler",
        "requestBody": {
          "description": "JSON request payload to get alternative suggested queries",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SuggestedQueriesRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A JSON object containing a list of alternative suggested queries",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SuggestedQueriesResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Service error relating to to updating card, likely due to conflicting tracking_id",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/card/generate": {
      "post": {
        "tags": [
          "card"
        ],
        "operationId": "generate_off_cards",
        "requestBody": {
          "description": "JSON request payload to perform RAG on some cards (chunks)",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateCardsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "This will be a HTTP stream, check the chat or search UI for an example how to process this"
          },
          "400": {
            "description": "Service error relating to to updating card, likely due to conflicting tracking_id",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/card/recommend": {
      "post": {
        "tags": [
          "card"
        ],
        "operationId": "get_recommended_cards",
        "requestBody": {
          "description": "JSON request payload to get recommendations of cards similar to the cards in the request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RecommendCardsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "JSON response payload containing cards with scores which are similar to those in the request body",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/CardMetadataWithVotesWithScore"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Service error relating to to getting similar cards",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/card/search": {
      "post": {
        "tags": [
          "card"
        ],
        "operationId": "search_card",
        "parameters": [
          {
            "name": "page",
            "in": "path",
            "description": "Page number of the search results",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "nullable": true,
              "minimum": 0
            }
          }
        ],
        "requestBody": {
          "description": "JSON request payload to semantically search for cards (chunks)",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchCardData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Cards which are similar to the embedding vector of the search query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SearchCardQueryResponseBody"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Service error relating to searching",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/card/tracking_id/update": {
      "put": {
        "tags": [
          "card"
        ],
        "operationId": "update_card_by_tracking_id",
        "requestBody": {
          "description": "JSON request payload to update a card by tracking_id (chunks)",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCardByTrackingIdData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Confirmation that the card has been updated as per your request"
          },
          "400": {
            "description": "Service error relating to to updating card",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/card/tracking_id/{tracking_id}": {
      "get": {
        "tags": [
          "card"
        ],
        "operationId": "get_card_by_tracking_id",
        "parameters": [
          {
            "name": "tracking_id",
            "in": "path",
            "description": "tracking_id of the card you want to fetch",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Card with the tracking_id that you were searching for",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CardMetadataWithVotesWithScore"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Service error relating to fidning a card by tracking_id",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "card"
        ],
        "operationId": "delete_card_by_tracking_id",
        "parameters": [
          {
            "name": "tracking_id",
            "in": "path",
            "description": "tracking_id of the card you want to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Confirmation that the card with the tracking_id specified was deleted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CardMetadataWithVotesWithScore"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Service error relating to finding a card by tracking_id",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/card/update": {
      "put": {
        "tags": [
          "card"
        ],
        "operationId": "update_card",
        "requestBody": {
          "description": "JSON request payload to update a card (chunk)",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCardData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No content Ok response indicating the card was updated as requested"
          },
          "400": {
            "description": "Service error relating to to updating card, likely due to conflicting tracking_id",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/card/{card_id}": {
      "get": {
        "tags": [
          "card"
        ],
        "operationId": "get_card_by_id",
        "parameters": [
          {
            "name": "card_id",
            "in": "path",
            "description": "id of the card you want to fetch",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Card with the id that you were searching for",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CardMetadataWithVotesWithScore"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Service error relating to fidning a card by tracking_id",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/card/{card_id}}": {
      "delete": {
        "tags": [
          "card"
        ],
        "operationId": "delete_card",
        "parameters": [
          {
            "name": "card_id",
            "in": "path",
            "description": "id of the card you want to delete",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Confirmation that the card with the id specified was deleted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CardMetadataWithVotesWithScore"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Service error relating to finding a card by tracking_id",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/card_collection": {
      "post": {
        "tags": [
          "card_collection"
        ],
        "operationId": "create_card_collection",
        "requestBody": {
          "description": "JSON request payload to cretea a CardCollection",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCardCollectionData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns the created CardCollection",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CardCollection"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Service error relating to creating the CardCollection",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "card_collection"
        ],
        "operationId": "update_card_collection",
        "requestBody": {
          "description": "JSON request payload to update a CardCollection",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCardCollectionData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Confirmation that the CardCollection was updated"
          },
          "400": {
            "description": "Service error relating to updating the CardCollection",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "card_collection"
        ],
        "operationId": "delete_card_collection",
        "requestBody": {
          "description": "JSON request payload to delete a CardCollection",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteCollectionData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Confirmation that the CardCollection was deleted"
          },
          "400": {
            "description": "Service error relating to deleting the CardCollection",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/card_collection/fulltextsearch": {
      "post": {
        "tags": [
          "card_collection"
        ],
        "operationId": "search_full_text_collections",
        "parameters": [
          {
            "name": "page",
            "in": "path",
            "description": "The page of search results to get",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 0
            }
          }
        ],
        "requestBody": {
          "description": "JSON request payload to full_text search a collection",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchCollectionsData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Collection cards which are similar to the postgres ts_vector of the search query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SearchCollectionsResult"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Service error relating to getting the collections that the card is in",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/card_collection/search": {
      "post": {
        "tags": [
          "card_collection"
        ],
        "operationId": "search_collections",
        "parameters": [
          {
            "name": "page",
            "in": "path",
            "description": "The page of search results to get",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 0
            }
          }
        ],
        "requestBody": {
          "description": "JSON request payload to semantically search a collection",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchCollectionsData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Collection cards which are similar to the embedding vector of the search query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SearchCollectionsResult"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Service error relating to getting the collections that the card is in",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/card_collection/{collection_id}/{page}": {
      "get": {
        "tags": [
          "card_collection"
        ],
        "operationId": "get_all_bookmarks",
        "parameters": [
          {
            "name": "collection_id",
            "in": "path",
            "description": "The id of the collection to get the cards from",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "page",
            "in": "path",
            "description": "The page of cards to get from the collection",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Bookmark'ed cards present within the specified collection",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BookmarkData"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Service error relating to getting the collections that the card is in",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/card_collection/{page_or_card_collection_id}": {
      "get": {
        "tags": [
          "card_collection"
        ],
        "operationId": "get_logged_in_user_card_collections",
        "parameters": [
          {
            "name": "page_or_card_collection_id",
            "in": "path",
            "description": "The page of collections to fetch",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The page of collections for the auth'ed user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CollectionData"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Service error relating to getting the collections for the auth'ed user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "card_collection"
        ],
        "operationId": "add_bookmark",
        "parameters": [
          {
            "name": "page_or_card_collection_id",
            "in": "path",
            "description": "The id of the collection to add the card to",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "JSON request payload to add a card to a collection (bookmark it)",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddCardToCollectionData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Confirmation that the card was added to the collection"
          },
          "400": {
            "description": "Service error relating to getting the collections that the card is in",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "card_collection"
        ],
        "operationId": "delete_bookmark",
        "parameters": [
          {
            "name": "page_or_card_collection_id",
            "in": "path",
            "description": "The id of the collection to remove the bookmark'ed card from",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "JSON request payload to remove a card to a collection (un-bookmark it)",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveBookmarkData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Confirmation that the card was removed to the collection"
          },
          "400": {
            "description": "Service error relating to removing the card from the collection",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/file": {
      "post": {
        "tags": [
          "file"
        ],
        "operationId": "upload_file_handler",
        "requestBody": {
          "description": "JSON request payload to upload a file",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UploadFileData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Confirmation that the file is uploading",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UploadFileResult"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Service error relating to uploading the file",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "file"
        ],
        "operationId": "update_file_handler",
        "requestBody": {
          "description": "JSON request payload to update a file",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateFileData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Confirmation that the file is updated"
          },
          "400": {
            "description": "Service error relating to initially processing the file",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/file/{file_id}": {
      "get": {
        "tags": [
          "file"
        ],
        "operationId": "get_file_handler",
        "parameters": [
          {
            "name": "file_id",
            "in": "path",
            "description": "The id of the file to fetch",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The file corresponding to the file_id requested",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FileDTO"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Service error relating to finding the file",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "file"
        ],
        "operationId": "delete_file_handler",
        "parameters": [
          {
            "name": "file_id",
            "in": "path",
            "description": "The id of the file to delete",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Confirmation that the file has been deleted"
          },
          "400": {
            "description": "Service error relating to finding or deleting the file",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/health": {
      "get": {
        "tags": [
          "health"
        ],
        "operationId": "health_check",
        "responses": {
          "200": {
            "description": "Confirmation that the service is healthy and can make embedding vectors"
          },
          "400": {
            "description": "Service error relating to making an embedding or overall service health",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/image/{file_name}": {
      "get": {
        "tags": [
          "file"
        ],
        "operationId": "get_image_file",
        "parameters": [
          {
            "name": "file_name",
            "in": "path",
            "description": "The name of the image file to return",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The raw image file corresponding to the file_name requested such that it can be a src for an img tag"
          },
          "400": {
            "description": "Service error relating to finding the file",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/invitation": {
      "post": {
        "tags": [
          "invitation"
        ],
        "operationId": "post_invitation",
        "requestBody": {
          "description": "JSON request payload to send an invitation",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InvitationData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Get a registration URL to set password for a given email",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvitationResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid email",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/message": {
      "post": {
        "tags": [
          "message"
        ],
        "operationId": "create_message_completion_handler",
        "requestBody": {
          "description": "JSON request payload to create a message completion",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMessageData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "This will be a HTTP stream, check the chat or search UI for an example how to process this"
          },
          "400": {
            "description": "Service error relating to getting a chat completion",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "message"
        ],
        "operationId": "edit_message_handler",
        "requestBody": {
          "description": "JSON request payload to edit a message and get a new stream",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditMessageData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "This will be a HTTP stream, check the chat or search UI for an example how to process this"
          },
          "400": {
            "description": "Service error relating to getting a chat completion",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "message"
        ],
        "operationId": "regenerate_message_handler",
        "requestBody": {
          "description": "JSON request payload to delete an agent message then regenerate it in a strem",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegenerateMessageData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "This will be a HTTP stream, check the chat or search UI for an example how to process this"
          },
          "400": {
            "description": "Service error relating to getting a chat completion",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/messages/{messages_topic_id}": {
      "get": {
        "tags": [
          "message"
        ],
        "operationId": "get_all_topic_messages",
        "parameters": [
          {
            "name": "messages_topic_id",
            "in": "path",
            "description": "The ID of the topic to get messages for",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All messages relating to the topic with the given ID",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Message"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Service error relating to getting the messages",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/notifications": {
      "put": {
        "tags": [
          "notifications"
        ],
        "operationId": "mark_notification_as_read",
        "requestBody": {
          "description": "JSON request payload with id of notification to mark read",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NotificationId"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Confirmation that the notification is marked read"
          },
          "400": {
            "description": "Service error relating to finding the notification and marking it read",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/notifications/{page}": {
      "get": {
        "tags": [
          "notifications"
        ],
        "operationId": "get_notifications",
        "parameters": [
          {
            "name": "page",
            "in": "path",
            "description": "Page number of notifications to get",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Notifications for the user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NotificationReturn"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Service error relating to getting notifications for the user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/notifications_readall": {
      "put": {
        "tags": [
          "notifications"
        ],
        "operationId": "mark_all_notifications_as_read",
        "responses": {
          "204": {
            "description": "Confirmation that the all notification were marked read for the auth'ed user"
          },
          "400": {
            "description": "Service error relating to finding the notifications for the auth'ed user and marking them read",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/password": {
      "post": {
        "tags": [
          "password"
        ],
        "operationId": "reset_user_password_handler",
        "requestBody": {
          "description": "JSON request payload to reset password",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordResetData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Confirmation that the password was reset"
          },
          "400": {
            "description": "Password either too short or did not match confirmation password",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/password/{email}": {
      "get": {
        "tags": [
          "password"
        ],
        "operationId": "send_password_reset_email_handler",
        "parameters": [
          {
            "name": "email",
            "in": "path",
            "description": "Email of the user to send the password reset email to",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/string"
            }
          }
        ],
        "requestBody": {
          "description": "JSON request payload to send email with password reset link",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordResetEmailData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Confirmation that the password reset email was sent"
          },
          "400": {
            "description": "Email was invalid or sendgrid had an error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/register/{invitation_id}": {
      "post": {
        "tags": [
          "register"
        ],
        "operationId": "register_user",
        "parameters": [
          {
            "name": "invitation_id",
            "in": "path",
            "description": "Unique uuid of the invitation you received",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "JSON request payload to set password",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetPasswordData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Get a registration URL to set password for a given email",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SlimUser"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Password too short or confirmation does not match",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/top_cards": {
      "get": {
        "tags": [
          "top_cards"
        ],
        "operationId": "get_top_cards",
        "parameters": [
          {
            "name": "page",
            "in": "path",
            "description": "The page of top cards to fetch",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "JSON body representing the top cards by collected votes",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/CardMetadataWithVotes"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Service error relating to fetching the top cards by collected votes",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/top_users/{page}": {
      "get": {
        "tags": [
          "top_users"
        ],
        "operationId": "get_top_users",
        "parameters": [
          {
            "name": "page",
            "in": "path",
            "description": "The page of users to fetch",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "JSON body representing the top users by collected votes",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TopUserData"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Service error relating to fetching the top users by collected votes",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/topic": {
      "get": {
        "tags": [
          "topic"
        ],
        "operationId": "get_all_topics",
        "responses": {
          "200": {
            "description": "All topics belonging to a given user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Topic"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Service error relating to topic get",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "topic"
        ],
        "operationId": "create_topic",
        "requestBody": {
          "description": "JSON request payload to create chat topic",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTopicData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The JSON response payload containing the created topic",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Topic"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Topic resolution empty or a service error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "topic"
        ],
        "operationId": "update_topic",
        "requestBody": {
          "description": "JSON request payload to update a chat topic",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTopicData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Confirmation that the topic was updated"
          },
          "400": {
            "description": "Service error relating to topic update",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "topic"
        ],
        "operationId": "delete_topic",
        "requestBody": {
          "description": "JSON request payload to delete a chat topic",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteTopicData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Confirmation that the topic was deleted"
          },
          "400": {
            "description": "Service error relating to topic deletion",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/user": {
      "put": {
        "tags": [
          "user"
        ],
        "operationId": "update_user",
        "requestBody": {
          "description": "JSON request payload to update user information for the auth'ed user",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "JSON body representing the updated user information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SlimUser"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Service error relating to updating the user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/user/collections/{user_id}/{page}": {
      "get": {
        "tags": [
          "user"
        ],
        "operationId": "get_specific_user_card_collections",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "The id of the user to fetch collections for",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "page",
            "in": "path",
            "description": "The page of collections to fetch",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "JSON body representing the collections created by the given user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CollectionData"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Service error relating to getting the collections created by the given user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/user/files/{user_id}": {
      "get": {
        "tags": [
          "user"
        ],
        "operationId": "get_user_files_handler",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "The id of the user to fetch files for",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "JSON body representing the files uploaded by the given user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/File"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Service error relating to getting the files uploaded by the given user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/user/set_api_key": {
      "get": {
        "tags": [
          "user"
        ],
        "operationId": "set_user_api_key",
        "responses": {
          "200": {
            "description": "JSON body representing the api_key for the user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SetUserApiKeyResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Service error relating to creating api_key for the user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/user/{user_id}/{page}": {
      "get": {
        "tags": [
          "user"
        ],
        "operationId": "get_user_with_votes_and_cards_by_id",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "The id of the user to fetch",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "page",
            "in": "path",
            "description": "The page of cards to fetch",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "JSON body representing the cards made by a given user with their votes",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserDTOWithVotesAndCards"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Service error relating to getting the cards and votes for the given user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/vote": {
      "post": {
        "tags": [
          "vote"
        ],
        "operationId": "create_vote",
        "requestBody": {
          "description": "JSON request payload to create a vote for the auth'ed user",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateVoteData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "JSON body representing the vote created for the auth'ed user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CardVote"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Service error relating to creating the vote",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/vote/{card_metadata_id}": {
      "delete": {
        "tags": [
          "vote"
        ],
        "operationId": "delete_vote",
        "parameters": [
          {
            "name": "card_metadata_id",
            "in": "path",
            "description": "The card metadata ID to delete the auth'ed user's vote for",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Confirmation that the auth'ed user's vote was deleted for the given card metadata ID"
          },
          "400": {
            "description": "Service error relating to creating the vote",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultError"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AddCardToCollectionData": {
        "type": "object",
        "required": [
          "card_metadata_id"
        ],
        "properties": {
          "card_metadata_id": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "AuthData": {
        "type": "object",
        "required": [
          "email",
          "password"
        ],
        "properties": {
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        }
      },
      "BookmarkCards": {
        "type": "object",
        "required": [
          "metadata"
        ],
        "properties": {
          "metadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CardMetadataWithVotesWithScore"
            }
          }
        }
      },
      "BookmarkCollectionResult": {
        "type": "object",
        "required": [
          "card_uuid",
          "slim_collections"
        ],
        "properties": {
          "card_uuid": {
            "type": "string",
            "format": "uuid"
          },
          "slim_collections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SlimCollection"
            }
          }
        }
      },
      "BookmarkData": {
        "type": "object",
        "required": [
          "bookmarks",
          "collection",
          "total_pages"
        ],
        "properties": {
          "bookmarks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BookmarkCards"
            }
          },
          "collection": {
            "$ref": "#/components/schemas/CardCollection"
          },
          "total_pages": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "CardCollection": {
        "type": "object",
        "required": [
          "id",
          "author_id",
          "name",
          "is_public",
          "description",
          "created_at",
          "updated_at"
        ],
        "properties": {
          "author_id": {
            "type": "string",
            "format": "uuid"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "is_public": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "CardCollectionAndFile": {
        "type": "object",
        "required": [
          "id",
          "author_id",
          "name",
          "is_public",
          "description",
          "created_at",
          "updated_at"
        ],
        "properties": {
          "author_id": {
            "type": "string",
            "format": "uuid"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "description": {
            "type": "string"
          },
          "file_id": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "is_public": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "CardMetadata": {
        "type": "object",
        "required": [
          "id",
          "content",
          "author_id",
          "created_at",
          "updated_at",
          "private"
        ],
        "properties": {
          "author_id": {
            "type": "string",
            "format": "uuid"
          },
          "card_html": {
            "type": "string",
            "nullable": true
          },
          "content": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "link": {
            "type": "string",
            "nullable": true
          },
          "metadata": {
            "nullable": true
          },
          "private": {
            "type": "boolean"
          },
          "qdrant_point_id": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "tag_set": {
            "type": "string",
            "nullable": true
          },
          "time_stamp": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "tracking_id": {
            "type": "string",
            "nullable": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "CardMetadataWithVotes": {
        "type": "object",
        "required": [
          "id",
          "content",
          "qdrant_point_id",
          "total_upvotes",
          "total_downvotes",
          "created_at",
          "updated_at",
          "private"
        ],
        "properties": {
          "author": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserDTO"
              }
            ],
            "nullable": true
          },
          "card_html": {
            "type": "string",
            "nullable": true
          },
          "content": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "link": {
            "type": "string",
            "nullable": true
          },
          "metadata": {
            "nullable": true
          },
          "private": {
            "type": "boolean"
          },
          "qdrant_point_id": {
            "type": "string",
            "format": "uuid"
          },
          "score": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "tag_set": {
            "type": "string",
            "nullable": true
          },
          "time_stamp": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "total_downvotes": {
            "type": "integer",
            "format": "int64"
          },
          "total_upvotes": {
            "type": "integer",
            "format": "int64"
          },
          "tracking_id": {
            "type": "string",
            "nullable": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "vote_by_current_user": {
            "type": "boolean",
            "nullable": true
          }
        }
      },
      "CardMetadataWithVotesWithScore": {
        "type": "object",
        "required": [
          "id",
          "content",
          "qdrant_point_id",
          "total_upvotes",
          "total_downvotes",
          "created_at",
          "updated_at",
          "private"
        ],
        "properties": {
          "author": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserDTO"
              }
            ],
            "nullable": true
          },
          "card_html": {
            "type": "string",
            "nullable": true
          },
          "content": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "file_id": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "file_name": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "link": {
            "type": "string",
            "nullable": true
          },
          "metadata": {
            "nullable": true
          },
          "private": {
            "type": "boolean"
          },
          "qdrant_point_id": {
            "type": "string",
            "format": "uuid"
          },
          "score": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "tag_set": {
            "type": "string",
            "nullable": true
          },
          "time_stamp": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "total_downvotes": {
            "type": "integer",
            "format": "int64"
          },
          "total_upvotes": {
            "type": "integer",
            "format": "int64"
          },
          "tracking_id": {
            "type": "string",
            "nullable": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "vote_by_current_user": {
            "type": "boolean",
            "nullable": true
          }
        }
      },
      "CardVote": {
        "type": "object",
        "required": [
          "id",
          "voted_user_id",
          "card_metadata_id",
          "vote",
          "created_at",
          "updated_at",
          "deleted"
        ],
        "properties": {
          "card_metadata_id": {
            "type": "string",
            "format": "uuid"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "deleted": {
            "type": "boolean"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "vote": {
            "type": "boolean"
          },
          "voted_user_id": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "ChatMessageProxy": {
        "type": "object",
        "required": [
          "role",
          "content"
        ],
        "properties": {
          "content": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "role": {
            "type": "string"
          }
        }
      },
      "CollectionData": {
        "type": "object",
        "required": [
          "collections",
          "total_pages"
        ],
        "properties": {
          "collections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CardCollectionAndFile"
            }
          },
          "total_pages": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "CreateCardCollectionData": {
        "type": "object",
        "required": [
          "name",
          "description",
          "is_public"
        ],
        "properties": {
          "description": {
            "type": "string"
          },
          "is_public": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "CreateCardData": {
        "type": "object",
        "properties": {
          "card_html": {
            "type": "string",
            "nullable": true
          },
          "collection_id": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "file_uuid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "link": {
            "type": "string",
            "nullable": true
          },
          "metadata": {
            "nullable": true
          },
          "private": {
            "type": "boolean",
            "nullable": true
          },
          "tag_set": {
            "type": "string",
            "nullable": true
          },
          "time_stamp": {
            "type": "string",
            "nullable": true
          },
          "tracking_id": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "CreateMessageData": {
        "type": "object",
        "required": [
          "new_message_content",
          "topic_id"
        ],
        "properties": {
          "new_message_content": {
            "type": "string"
          },
          "topic_id": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "CreateTopicData": {
        "type": "object",
        "required": [
          "resolution"
        ],
        "properties": {
          "normal_chat": {
            "type": "boolean",
            "nullable": true
          },
          "resolution": {
            "type": "string"
          }
        }
      },
      "CreateVoteData": {
        "type": "object",
        "required": [
          "card_metadata_id",
          "vote"
        ],
        "properties": {
          "card_metadata_id": {
            "type": "string",
            "format": "uuid"
          },
          "vote": {
            "type": "boolean"
          }
        }
      },
      "DefaultError": {
        "type": "object",
        "required": [
          "message"
        ],
        "properties": {
          "message": {
            "type": "string"
          }
        }
      },
      "DeleteCollectionData": {
        "type": "object",
        "required": [
          "collection_id"
        ],
        "properties": {
          "collection_id": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "DeleteTopicData": {
        "type": "object",
        "required": [
          "topic_id"
        ],
        "properties": {
          "topic_id": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "EditMessageData": {
        "type": "object",
        "required": [
          "topic_id",
          "message_sort_order",
          "new_message_content"
        ],
        "properties": {
          "message_sort_order": {
            "type": "integer",
            "format": "int32"
          },
          "new_message_content": {
            "type": "string"
          },
          "topic_id": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "File": {
        "type": "object",
        "required": [
          "id",
          "user_id",
          "file_name",
          "private",
          "created_at",
          "updated_at",
          "size"
        ],
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "file_name": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "link": {
            "type": "string",
            "nullable": true
          },
          "metadata": {
            "nullable": true
          },
          "private": {
            "type": "boolean"
          },
          "size": {
            "type": "integer",
            "format": "int64"
          },
          "tag_set": {
            "type": "string",
            "nullable": true
          },
          "time_stamp": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "user_id": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "FileDTO": {
        "type": "object",
        "required": [
          "id",
          "user_id",
          "file_name",
          "private",
          "created_at",
          "updated_at",
          "size",
          "base64url_content"
        ],
        "properties": {
          "base64url_content": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "file_name": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "link": {
            "type": "string",
            "nullable": true
          },
          "metadata": {
            "nullable": true
          },
          "private": {
            "type": "boolean"
          },
          "size": {
            "type": "integer",
            "format": "int64"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "user_id": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "FileUploadCompletedNotificationWithName": {
        "type": "object",
        "required": [
          "id",
          "user_uuid",
          "collection_uuid",
          "user_read",
          "created_at",
          "updated_at"
        ],
        "properties": {
          "collection_name": {
            "type": "string",
            "nullable": true
          },
          "collection_uuid": {
            "type": "string",
            "format": "uuid"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "user_read": {
            "type": "boolean"
          },
          "user_uuid": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "GenerateCardsRequest": {
        "type": "object",
        "required": [
          "prev_messages",
          "card_ids"
        ],
        "properties": {
          "card_ids": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "prev_messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatMessageProxy"
            }
          }
        }
      },
      "GenerateOffCollectionData": {
        "type": "object",
        "required": [
          "collection_id"
        ],
        "properties": {
          "collection_id": {
            "type": "string",
            "format": "uuid"
          },
          "page": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "minimum": 0
          },
          "query": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "GetAllBookmarksData": {
        "type": "object",
        "required": [
          "collection_id"
        ],
        "properties": {
          "collection_id": {
            "type": "string",
            "format": "uuid"
          },
          "page": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "minimum": 0
          }
        }
      },
      "GetCollectionsForCardsData": {
        "type": "object",
        "required": [
          "card_ids"
        ],
        "properties": {
          "card_ids": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          }
        }
      },
      "GetUserWithVotesAndCardsData": {
        "type": "object",
        "required": [
          "user_id",
          "page"
        ],
        "properties": {
          "page": {
            "type": "integer",
            "format": "int64"
          },
          "user_id": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "InvitationData": {
        "type": "object",
        "required": [
          "email",
          "referral_tokens"
        ],
        "properties": {
          "email": {
            "type": "string"
          },
          "referral_tokens": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "InvitationResponse": {
        "type": "object",
        "required": [
          "registration_url"
        ],
        "properties": {
          "registration_url": {
            "type": "string"
          }
        }
      },
      "Message": {
        "type": "object",
        "required": [
          "id",
          "topic_id",
          "sort_order",
          "content",
          "role",
          "deleted",
          "created_at",
          "updated_at"
        ],
        "properties": {
          "completion_tokens": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "content": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "deleted": {
            "type": "boolean"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "prompt_tokens": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "role": {
            "type": "string"
          },
          "sort_order": {
            "type": "integer",
            "format": "int32"
          },
          "topic_id": {
            "type": "string",
            "format": "uuid"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Notification": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/FileUploadCompletedNotificationWithName"
          }
        ]
      },
      "NotificationId": {
        "type": "object",
        "required": [
          "notification_id"
        ],
        "properties": {
          "notification_id": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "NotificationReturn": {
        "type": "object",
        "required": [
          "notifications",
          "full_count",
          "total_pages"
        ],
        "properties": {
          "full_count": {
            "type": "integer",
            "format": "int32"
          },
          "notifications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Notification"
            }
          },
          "total_pages": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "PasswordResetData": {
        "type": "object",
        "required": [
          "password_reset_id",
          "password",
          "password_confirmation"
        ],
        "properties": {
          "password": {
            "type": "string"
          },
          "password_confirmation": {
            "type": "string"
          },
          "password_reset_id": {
            "type": "string"
          }
        }
      },
      "PasswordResetEmailData": {
        "type": "object",
        "required": [
          "email"
        ],
        "properties": {
          "email": {
            "type": "string"
          }
        }
      },
      "RecommendCardsRequest": {
        "type": "object",
        "required": [
          "positive_card_ids"
        ],
        "properties": {
          "positive_card_ids": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          }
        }
      },
      "RegenerateMessageData": {
        "type": "object",
        "required": [
          "topic_id"
        ],
        "properties": {
          "topic_id": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "RemoveBookmarkData": {
        "type": "object",
        "required": [
          "card_metadata_id"
        ],
        "properties": {
          "card_metadata_id": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "ReturnCreatedCard": {
        "type": "object",
        "required": [
          "card_metadata",
          "duplicate"
        ],
        "properties": {
          "card_metadata": {
            "$ref": "#/components/schemas/CardMetadata"
          },
          "duplicate": {
            "type": "boolean"
          }
        }
      },
      "ScoreCardDTO": {
        "type": "object",
        "required": [
          "metadata",
          "score"
        ],
        "properties": {
          "metadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CardMetadataWithVotesWithScore"
            }
          },
          "score": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "SearchCardData": {
        "type": "object",
        "required": [
          "content"
        ],
        "properties": {
          "content": {
            "type": "string"
          },
          "filters": {
            "nullable": true
          },
          "link": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "tag_set": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "time_range": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "type": "string"
                },
                {
                  "type": "string"
                }
              ]
            },
            "nullable": true
          }
        }
      },
      "SearchCardQueryResponseBody": {
        "type": "object",
        "required": [
          "score_cards",
          "total_card_pages"
        ],
        "properties": {
          "score_cards": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScoreCardDTO"
            }
          },
          "total_card_pages": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "SearchCollectionsData": {
        "type": "object",
        "required": [
          "content",
          "collection_id"
        ],
        "properties": {
          "collection_id": {
            "type": "string",
            "format": "uuid"
          },
          "content": {
            "type": "string"
          },
          "filters": {
            "nullable": true
          },
          "link": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "tag_set": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        }
      },
      "SearchCollectionsResult": {
        "type": "object",
        "required": [
          "bookmarks",
          "collection",
          "total_pages"
        ],
        "properties": {
          "bookmarks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScoreCardDTO"
            }
          },
          "collection": {
            "$ref": "#/components/schemas/CardCollection"
          },
          "total_pages": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "SetPasswordData": {
        "type": "object",
        "required": [
          "password",
          "password_confirmation"
        ],
        "properties": {
          "password": {
            "type": "string"
          },
          "password_confirmation": {
            "type": "string"
          }
        }
      },
      "SetUserApiKeyResponse": {
        "type": "object",
        "required": [
          "api_key"
        ],
        "properties": {
          "api_key": {
            "type": "string"
          }
        }
      },
      "SlimUser": {
        "type": "object",
        "required": [
          "id",
          "email",
          "visible_email"
        ],
        "properties": {
          "email": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "username": {
            "type": "string",
            "nullable": true
          },
          "visible_email": {
            "type": "boolean"
          },
          "website": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "SuggestedQueriesRequest": {
        "type": "object",
        "required": [
          "query"
        ],
        "properties": {
          "query": {
            "type": "string"
          }
        }
      },
      "SuggestedQueriesResponse": {
        "type": "object",
        "required": [
          "queries"
        ],
        "properties": {
          "queries": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "TopUserData": {
        "type": "object",
        "required": [
          "users",
          "total_user_pages"
        ],
        "properties": {
          "total_user_pages": {
            "type": "integer",
            "format": "int64"
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserDTOWithScore"
            }
          }
        }
      },
      "Topic": {
        "type": "object",
        "required": [
          "id",
          "user_id",
          "resolution",
          "side",
          "deleted",
          "created_at",
          "updated_at",
          "normal_chat"
        ],
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "deleted": {
            "type": "boolean"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "normal_chat": {
            "type": "boolean"
          },
          "resolution": {
            "type": "string"
          },
          "side": {
            "type": "boolean"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "user_id": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "UpdateCardByTrackingIdData": {
        "type": "object",
        "required": [
          "tracking_id"
        ],
        "properties": {
          "card_html": {
            "type": "string",
            "nullable": true
          },
          "card_uuid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "link": {
            "type": "string",
            "nullable": true
          },
          "metadata": {
            "nullable": true
          },
          "private": {
            "type": "boolean",
            "nullable": true
          },
          "time_stamp": {
            "type": "string",
            "nullable": true
          },
          "tracking_id": {
            "type": "string"
          }
        }
      },
      "UpdateCardCollectionData": {
        "type": "object",
        "required": [
          "collection_id"
        ],
        "properties": {
          "collection_id": {
            "type": "string",
            "format": "uuid"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "is_public": {
            "type": "boolean",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "UpdateCardData": {
        "type": "object",
        "required": [
          "card_uuid"
        ],
        "properties": {
          "card_html": {
            "type": "string",
            "nullable": true
          },
          "card_uuid": {
            "type": "string",
            "format": "uuid"
          },
          "link": {
            "type": "string",
            "nullable": true
          },
          "metadata": {
            "nullable": true
          },
          "private": {
            "type": "boolean",
            "nullable": true
          },
          "time_stamp": {
            "type": "string",
            "nullable": true
          },
          "tracking_id": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "UpdateFileData": {
        "type": "object",
        "required": [
          "file_id",
          "private"
        ],
        "properties": {
          "file_id": {
            "type": "string",
            "format": "uuid"
          },
          "private": {
            "type": "boolean"
          }
        }
      },
      "UpdateTopicData": {
        "type": "object",
        "required": [
          "topic_id",
          "resolution",
          "side"
        ],
        "properties": {
          "resolution": {
            "type": "string"
          },
          "side": {
            "type": "boolean"
          },
          "topic_id": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "UpdateUserData": {
        "type": "object",
        "required": [
          "visible_email"
        ],
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "visible_email": {
            "type": "boolean"
          },
          "website": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "UploadFileData": {
        "type": "object",
        "required": [
          "base64_docx_file",
          "file_name",
          "file_mime_type",
          "private"
        ],
        "properties": {
          "base64_docx_file": {
            "type": "string"
          },
          "create_cards": {
            "type": "boolean",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "file_mime_type": {
            "type": "string"
          },
          "file_name": {
            "type": "string"
          },
          "link": {
            "type": "string",
            "nullable": true
          },
          "metadata": {
            "nullable": true
          },
          "private": {
            "type": "boolean"
          },
          "tag_set": {
            "type": "string",
            "nullable": true
          },
          "time_stamp": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "UploadFileResult": {
        "type": "object",
        "required": [
          "file_metadata"
        ],
        "properties": {
          "file_metadata": {
            "$ref": "#/components/schemas/File"
          }
        }
      },
      "UserCollectionQuery": {
        "type": "object",
        "required": [
          "user_id",
          "page"
        ],
        "properties": {
          "page": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "user_id": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "UserDTO": {
        "type": "object",
        "required": [
          "id",
          "visible_email",
          "created_at"
        ],
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "username": {
            "type": "string",
            "nullable": true
          },
          "visible_email": {
            "type": "boolean"
          },
          "website": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "UserDTOWithScore": {
        "type": "object",
        "required": [
          "id",
          "visible_email",
          "created_at",
          "score"
        ],
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "score": {
            "type": "integer",
            "format": "int64"
          },
          "username": {
            "type": "string",
            "nullable": true
          },
          "visible_email": {
            "type": "boolean"
          },
          "website": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "UserDTOWithVotesAndCards": {
        "type": "object",
        "required": [
          "id",
          "visible_email",
          "created_at",
          "total_cards_created",
          "cards",
          "total_upvotes_received",
          "total_downvotes_received",
          "total_votes_cast"
        ],
        "properties": {
          "cards": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CardMetadataWithVotesWithScore"
            }
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "total_cards_created": {
            "type": "integer",
            "format": "int64"
          },
          "total_downvotes_received": {
            "type": "integer",
            "format": "int32"
          },
          "total_upvotes_received": {
            "type": "integer",
            "format": "int32"
          },
          "total_votes_cast": {
            "type": "integer",
            "format": "int32"
          },
          "username": {
            "type": "string",
            "nullable": true
          },
          "visible_email": {
            "type": "boolean"
          },
          "website": {
            "type": "string",
            "nullable": true
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "invitation",
      "description": "Invitations for new users endpoint"
    },
    {
      "name": "register",
      "description": "Register new users endpoint"
    },
    {
      "name": "auth",
      "description": "Authentication endpoint"
    },
    {
      "name": "password",
      "description": "Password reset endpoint"
    },
    {
      "name": "topic",
      "description": "Topic chat endpoint"
    },
    {
      "name": "message",
      "description": "Message chat endpoint"
    },
    {
      "name": "vote",
      "description": "Vote endpoint"
    },
    {
      "name": "card",
      "description": "Card endpoint"
    },
    {
      "name": "top_users",
      "description": "Top users endpoint"
    },
    {
      "name": "top_cards",
      "description": "Top cards endpoint"
    },
    {
      "name": "user",
      "description": "User endpoint"
    },
    {
      "name": "card_collection",
      "description": "Card collection endpoint"
    },
    {
      "name": "file",
      "description": "File endpoint"
    },
    {
      "name": "notifications",
      "description": "Notifications endpoint"
    },
    {
      "name": "health",
      "description": "Health check endpoint"
    }
  ]
}